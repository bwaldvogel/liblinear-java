buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'de.undercouch.download' version '4.1.1'
    id 'me.champeau.gradle.jmh' version '0.5.3'
}

group = "de.bwaldvogel"
version = '2.43'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    title = 'liblinear'
}

jar {
    manifest {
        attributes 'Implementation-Title': title, 'Implementation-Version': archiveVersion
    }
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'de.bwaldvogel'
            artifactId = 'liblinear'
            version = project.version
            pom {
                name = title
                description = 'Java port of Liblinear'
                url = 'https://github.com/bwaldvogel/liblinear'
                inceptionYear = '2008'

                licenses {
                    license {
                        name = 'The BSD License'
                        url = 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'bwaldvogel'
                        name = 'Benedikt Waldvogel'
                        email = 'mail@bwaldvogel.de'
                    }
                }
                scm {
                    url = 'git@github.com:bwaldvogel/liblinear.git'
                    connection = 'scm:git:git@github.com:bwaldvogel/liblinear.git'
                    developerConnection = 'scm:git:git@github.com:bwaldvogel/liblinear.git'
                }
            }

            from components.java

            artifact sourceJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = project.hasProperty('nexusUsername') ? project.property('nexusUsername') : System.getenv('NEXUS_USERNAME')
                password = project.hasProperty('nexusPassword') ? project.property('nexusPassword') : System.getenv('NEXUS_PASSWORD')
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    dependsOn test
}

apply from: 'datasets.gradle'

test.dependsOn downloadAndVerifyDatasets

test {
    useJUnitPlatform()

    maxHeapSize = "256m"
}

wrapper {
    gradleVersion = "7.0"
    distributionType = Wrapper.DistributionType.ALL
}

jmh {
    include = ['de\\.bwaldvogel\\.liblinear\\.LinearBenchmark.*']
    jvmArgs = ["-Ddataset.directory=" + projectDir + "/src/test/datasets"]
}

tasks['jmh'].dependsOn downloadAndVerifyRcv1

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: 'latest.release'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: 'latest.release'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: 'latest.release'
    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: 'latest.release'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: 'latest.release'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: 'latest.release'
    testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: 'latest.release'

    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: 'latest.release'

    jmh group: 'org.apache.commons', name: 'commons-compress', version: 'latest.release'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:latest.release' // for IntelliJ

    components.all { ComponentMetadataDetails details ->
        details.statusScheme = ['candidate', 'release']
        if (details.id.version =~ /(?i).+([-.])(CANDIDATE|RC|BETA|ALPHA).*/) {
            details.status = 'candidate'
        } else {
            details.status = 'release'
        }
    }
}

dependencyLocking {
    lockAllConfigurations()
}
